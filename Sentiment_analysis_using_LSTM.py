# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t_XjBHU5F5cibU8Z-cIaRwJ2wozO68jQ

IMPORT REQUIRED LIBRARIES AND PACKAGES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D , GRU,SimpleRNN
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
import re
import keras
import keras.utils
from keras import utils as np_utils

"""LOADING THE DATASET"""

data = pd.read_csv('HD_DATASET.csv', encoding='cp1251')  # Try UTF-8 encoding

print(data.head(5))

"""NECESSARY ATTRIBUTES"""

# Keeping only the neccessary columns
data = data[['sentence','Sentiment']]
print(data.head(5))

plt.figure(figsize =(4, 7))
plt.pie(data.Sentiment.value_counts(), colors=["yellow", "orange", "pink"],labels = ['negative','positive','neutral'],autopct='%1.0f%%')
# show plot
plt.show()

"""COUNT OF DISCUSSIONS - 13,005"""

count_of_sentence = data['sentence'].value_counts()

# Print the counts in descending order
print(count_of_sentence)

"""COUNT OF SENTIMENTS --> (POSITIVE,NEGATIVE,NEUTRAL)=4335"""

data['Sentiment'].value_counts()

"""CONVERTING TEXT INTO LOWERCASE AND REMOVING PUNCTUATIONS AND NUMBERS"""

data['sentence'] = data['sentence'].astype(str).apply(lambda x: x.lower() if isinstance(x, str) else x)

data['sentence'] = data['sentence'].apply((lambda x: re.sub('[^a-zA-z0-9\s]','',x)))


for idx,row in data.iterrows():
    row[0] = row[0].replace('rt',' ')

data.Sentiment=data.Sentiment.replace({'Positive':1,'Negative':0,'Neutral':2})

data.head(15)

"""TOKENIZING AND PADDING"""

max_words = 2000
tokenizer = Tokenizer(num_words=max_words, split=' ')
tokenizer.fit_on_texts(data['sentence'].values)
X = tokenizer.texts_to_sequences(data['sentence'].values)
X = pad_sequences(X)

"""REPLACING SENTIMENTS INTO 0,1,2"""

data.Sentiment=data.Sentiment.replace({'Positive': 1, 'Negative': 0,'Neutral':2})

data.head()

# Label Encoding for 'Aspect_Sentiment'
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
Y = label_encoder.fit_transform(data['Sentiment'])
print("Encoded Sentiments:", Y)

"""BUILDING THE MODEL USING LSTM AND COMPILING THE MODEL"""

from tensorflow.keras.layers import Bidirectional
from tensorflow.keras.layers import Embedding, LSTM, Dense, GlobalMaxPooling1D

embed_dim = 128
lstm_out = 512

model = Sequential()
model.add(Embedding(max_words, embed_dim,input_length = X.shape[1]))
#model.add(SpatialDropout1D(0.4))
model.add(Bidirectional(GRU(lstm_out,recurrent_dropout=0.1)))
model.add(Dense(3,activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model.summary())

Y = pd.get_dummies(data['Sentiment']).values

"""SPLITING THE DATASET INTO TRAIN AND TEST"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 42)
print(X_train.shape,Y_train.shape)
print(X_test.shape,Y_test.shape)

"""FITTING THE MODEL"""

history=model.fit(X_train, Y_train, epochs = 5, batch_size=128, validation_data=(X_test, Y_test),verbose = 2)

import matplotlib.pyplot as plt

"""ACCURACY AND LOSS VISUALIZATION"""

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'r', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
plt.xlabel('Epochs')
plt.ylabel("Accuracy")
plt.figure()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.xlabel('Epochs')
plt.ylabel("Loss")

plt.show()

"""EVALUATING THE MODEL"""

model.evaluate(X_test,Y_test)

y_pred = model.predict(X_test)
y_pred = np.where(y_pred>0.5, 1, 0)

from sklearn.metrics import classification_report

"""CLASSIFICATION REPORT"""

report = classification_report(Y_test,y_pred)
print(report)

"""TESTING THE PERFOMANCE OF MODEL

NEGATIVE SENTENCE AS INPUT
"""

HD1= ['i have seriously affected  from food allergy']

HD1 = tokenizer.texts_to_sequences(HD1)
HD1 = keras.preprocessing.sequence.pad_sequences(HD1 , maxlen= 40 , dtype = 'int32' , value = 0)
print(HD1)

sentiment1 = model.predict(HD1 , batch_size = 1 , verbose = 2)[0]

"""PREDICTED THE UNSEEN TEXT AS NEGATIVE"""

if(np.argmax(sentiment1) == 0):
    print("negative")
elif (np.argmax(sentiment1) == 1):
    print("positive")
elif(np.argmax(sentiment1) == 2):
    print("neutral")

"""POSITIVE  SENTENCE AS INPUT"""

HD2 = ["Having successfully recovered from my food allergy, I feel like I've been given a second chance at enjoying life to the fullest."]

HD2 = tokenizer.texts_to_sequences(HD2)
HD2 = keras.preprocessing.sequence.pad_sequences(HD2 , maxlen= 40 , dtype = 'int32' , value = 0)
print(HD2)

sentiment2 = model.predict(HD2, batch_size = 1 , verbose = 2)[0]

"""PREDICTED THE UNSEEN TEXT AS POSITIVE"""

if(np.argmax(sentiment2) == 0):
    print("negative")
elif (np.argmax(sentiment2) == 1):
    print("positive")
elif(np.argmax(sentiment2) == 2):
    print("neutral")

"""NEUTRAL SENTENCE AS INPUT"""

HD3=["Heart disease treatment depends on the cause and type of heart damaget" ]
HD3 = tokenizer.texts_to_sequences(HD3)
HD3 = keras.preprocessing.sequence.pad_sequences(HD3 , maxlen= 40 , dtype = 'int32' , value = 0)
print(HD3)

sentiment3 = model.predict(HD3, batch_size = 1 , verbose = 2)[0]

"""PREDICTED THE UNSEEN TEXT AS NEUTRAL"""

if(np.argmax(sentiment3) == 0):
    print("negative")
elif (np.argmax(sentiment3) == 1):
    print("positive")
elif(np.argmax(sentiment3) == 2):
    print("neutral")